name: Deploy multi-arch image manifests

on:
  workflow_call:
    ###
    ### Variables
    ###
    inputs:
      enabled:
        description: 'Determines wheather this workflow is enabled at all (will run or skip).'
        required: true
        type: boolean
      can_deploy:
        description: 'Determines wheather this workflow will also deploy (login and push).'
        required: true
        type: boolean
      deploy_matrix:
        description: 'The version deploy matrix as JSON string ( list of objects: [{NAME, VERSION[], ARCH[]}] ).'
        required: true
        type: string
      params_matrix:
        description: 'The build matrix set via params.yml.'
        required: true
        type: string
      artifact_prefix:
        description: 'Unique artifact name prefix (to avoid overriding existing artifcats during parallel runs).'
        required: true
        type: string
      has_refs:
        description: 'The ref build matrix as JSON string (list of git refs to build/deploy).'
        required: true
        type: string

    ###
    ### Secrets
    ###
    secrets:
      dockerhub_username:
        description: 'The username for Dockerhub.'
        required: false
      dockerhub_password:
        description: 'The password for Dockerhub.'
        required: false

jobs:
  # -----------------------------------------------------------------------------------------------
  # JOB (3/3): DEPLOY
  # -----------------------------------------------------------------------------------------------
  deploy:
    name: ${{ matrix.name }}-${{ matrix.version }} (${{ matrix.flavour }}) ${{ matrix.refs }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(inputs.deploy_matrix) }}
    if: inputs.enabled && inputs.can_deploy
    steps:
      # ------------------------------------------------------------
      # Setup repository
      # ------------------------------------------------------------
      - name: "[SETUP] Checkout repository (current)"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        if: ${{ inputs.has_refs == 0 }}

      - name: "[SETUP] Checkout repository (ref: ${{ matrix.refs }})"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ matrix.refs }}
        if: ${{ inputs.has_refs != 0 }}

      - name: "[SETUP] Setup QEMU environment"
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: "[SETUP] Determine Docker tag"
        id: tag
        uses: cytopia/docker-tag-action@v0.4.15

      - name: "[SETUP] Determine manifest arches"
        id: manifest
        run: |
          ARCHES="$( echo '${{ inputs.params_matrix }}' \
            | jq 'group_by(.NAME, .VERSION, .ARCH)' \
            | jq 'map({NAME: .[].NAME, VERSION: .[].VERSION[], FLAVOUR: .[].FLAVOUR[], ARCHES: .[].ARCH|join(",")})' \
            | jq '.[] | select(.NAME=="${{ matrix.name }}" and .VERSION=="${{ matrix.version }}" and .FLAVOUR=="${{ matrix.flavour }}") | .ARCHES' \
            | jq -c -M \
          )"
          echo "::set-output name=arches::${ARCHES}"
          echo "ARCHES: ${ARCHES}"


      # ------------------------------------------------------------
      # Login
      # ------------------------------------------------------------
      - name: "Login"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}


      # ------------------------------------------------------------
      # Create Manifest
      # ------------------------------------------------------------

      - name: "[Create Manifest] base (${{ steps.manifest.outputs.arches }})"
        uses: cytopia/shell-command-retry-action@v0.1.2
        with:
          retries: 2
          command: |
            make manifest-create VERSION=${{ matrix.version }} FLAVOUR=base ARCHES=${{ steps.manifest.outputs.arches }} TAG=${{ steps.tag.outputs.docker-tag }}

      - name: "[Create Manifest] mods (${{ steps.manifest.outputs.arches }})"
        uses: cytopia/shell-command-retry-action@v0.1.2
        with:
          retries: 2
          command: |
            make manifest-create VERSION=${{ matrix.version }} FLAVOUR=mods ARCHES=${{ steps.manifest.outputs.arches }} TAG=${{ steps.tag.outputs.docker-tag }}

      - name: "[Create Manifest] prod (${{ steps.manifest.outputs.arches }})"
        uses: cytopia/shell-command-retry-action@v0.1.2
        with:
          retries: 2
          command: |
            make manifest-create VERSION=${{ matrix.version }} FLAVOUR=prod ARCHES=${{ steps.manifest.outputs.arches }} TAG=${{ steps.tag.outputs.docker-tag }}

      - name: "[Create Manifest] work (${{ steps.manifest.outputs.arches }})"
        uses: cytopia/shell-command-retry-action@v0.1.2
        with:
          retries: 2
          command: |
            make manifest-create VERSION=${{ matrix.version }} FLAVOUR=work ARCHES=${{ steps.manifest.outputs.arches }} TAG=${{ steps.tag.outputs.docker-tag }}


      # ------------------------------------------------------------
      # Deploy Manifest
      # ------------------------------------------------------------

      - name: "[Push Manifest] base: ${{ steps.tag.outputs.docker-tag }}"
        uses: cytopia/shell-command-retry-action@v0.1.2
        with:
          retries: 2
          command: |
            make manifest-push VERSION=${{ matrix.version }} FLAVOUR=base TAG=${{ steps.tag.outputs.docker-tag }}

      - name: "[Push Manifest] mods: ${{ steps.tag.outputs.docker-tag }}"
        uses: cytopia/shell-command-retry-action@v0.1.2
        with:
          retries: 2
          command: |
            make manifest-push VERSION=${{ matrix.version }} FLAVOUR=mods TAG=${{ steps.tag.outputs.docker-tag }}

      - name: "[Push Manifest] prod: ${{ steps.tag.outputs.docker-tag }}"
        uses: cytopia/shell-command-retry-action@v0.1.2
        with:
          retries: 2
          command: |
            make manifest-push VERSION=${{ matrix.version }} FLAVOUR=prod TAG=${{ steps.tag.outputs.docker-tag }}

      - name: "[Push Manifest] work: ${{ steps.tag.outputs.docker-tag }}"
        uses: cytopia/shell-command-retry-action@v0.1.2
        with:
          retries: 2
          command: |
            make manifest-push VERSION=${{ matrix.version }} FLAVOUR=work TAG=${{ steps.tag.outputs.docker-tag }}
